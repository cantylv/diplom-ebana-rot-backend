{
    "swagger": "2.0",
    "info": {
        "description": "Сервис работает с текстами песнями, спектр действий - CRUD. Доступны пагинация и фильтрация.",
        "title": "Swagger API для сервиса получения текста песен",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "Лобанов И.И.",
            "url": "http://t.me/cantylv",
            "email": "physic2003@mail.ru"
        },
        "version": "1.0"
    },
    "host": "localhost:8080",
    "basePath": "/api/v1",
    "paths": {
        "/songs": {
            "get": {
                "description": "Get songs from the library based on filtering options",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "song"
                ],
                "summary": "Retrieve a list of library songs",
                "operationId": "get-library-songs",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Song identifiers in format: 'uuid_id1@uuid_id2'",
                        "name": "ids",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Song names in format: 'song_name1@song_name2'",
                        "name": "names",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Left boundary of the interval in format: 'DD-MM-YYYY'",
                        "name": "from_release_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "current time",
                        "description": "Right boundary of the interval in format: 'DD-MM-YYYY'",
                        "name": "to_release_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search text in couplets of song, e.g.: 'love'",
                        "name": "text",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 2,
                        "description": "Max number of visible songs, e.g.: 3",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "Number of skipped songs, e.g.: 3",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of songs when songs are found",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.Song"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request - validation errors",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseError"
                        }
                    },
                    "404": {
                        "description": "Message when no songs are found",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseError"
                        }
                    }
                }
            },
            "post": {
                "description": "Add new song to the library. Saves it in database.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "song"
                ],
                "summary": "Create new song",
                "operationId": "add-new-song-to-library",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request_body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Created song",
                        "schema": {
                            "$ref": "#/definitions/entity.Song"
                        }
                    },
                    "400": {
                        "description": "Bad request - invalid request body",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseError"
                        }
                    }
                }
            }
        },
        "/songs/{song_id}": {
            "get": {
                "description": "Receiving library song by id.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "song"
                ],
                "summary": "Get library song.",
                "operationId": "get-library-song",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Song identifier in format: 'uuid_id'",
                        "name": "song_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 2,
                        "description": "Max number of visible songs, e.g.: 3",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "Number of skipped songs, e.g.: 3",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Song from library",
                        "schema": {
                            "$ref": "#/definitions/entity.Song"
                        }
                    },
                    "400": {
                        "description": "Bad request - invalid request body",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseError"
                        }
                    },
                    "404": {
                        "description": "Message when no song is found",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseError"
                        }
                    }
                }
            },
            "put": {
                "description": "Update library song by id.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "song"
                ],
                "summary": "Update library song.",
                "operationId": "udpate-library-song",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Song identifier in format: 'uuid_id'",
                        "name": "song_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Data for update library song",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateSong"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated song from library",
                        "schema": {
                            "$ref": "#/definitions/entity.Song"
                        }
                    },
                    "400": {
                        "description": "Bad request - invalid request body",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete library song by id.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "song"
                ],
                "summary": "Delete library song.",
                "operationId": "delete-library-song",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Song identifier in format: 'uuid_id'",
                        "name": "song_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Song from library",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseDetail"
                        }
                    },
                    "400": {
                        "description": "Bad request - invalid request body",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseError"
                        }
                    },
                    "404": {
                        "description": "Message when no song is found",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.CreateData": {
            "description": "Structure for creating a new song with its details.",
            "type": "object",
            "properties": {
                "link": {
                    "type": "string",
                    "example": "https://youtube.com/YSf231sfsf9"
                },
                "name": {
                    "type": "string",
                    "example": "Shape of You"
                },
                "release_date": {
                    "type": "string",
                    "example": "01-06-2017"
                },
                "text": {
                    "description": "Text object containing",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.NewText"
                        }
                    ]
                }
            }
        },
        "dto.NewText": {
            "description": "Structure for the text of the song, including its couplets.",
            "type": "object",
            "properties": {
                "couplets": {
                    "description": "List of couplets in the song",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "dto.ResponseDetail": {
            "type": "object",
            "properties": {
                "detail": {
                    "type": "string"
                }
            }
        },
        "dto.ResponseError": {
            "type": "object",
            "properties": {
                "errors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "dto.UpdateSong": {
            "description": "Structure for updating an existing song with its details.",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "example": "41b3b583-484b-4a49-b683-aece6b539425"
                },
                "link": {
                    "type": "string",
                    "example": "https://youtube.com/YSf231sfsf9"
                },
                "name": {
                    "type": "string",
                    "example": "Shape of You"
                },
                "release_date": {
                    "type": "string",
                    "example": "01-06-2017"
                },
                "text": {
                    "description": "Text object containing",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.NewText"
                        }
                    ]
                }
            }
        },
        "entity.Song": {
            "description": "Song object",
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string",
                    "example": "01-06-2017"
                },
                "id": {
                    "type": "string",
                    "example": "41b3b583-484b-4a49-b683-aece6b539425"
                },
                "link": {
                    "type": "string",
                    "example": "https://youtube.com/YSf231sfsf9"
                },
                "name": {
                    "type": "string",
                    "example": "Shape of You"
                },
                "release_date": {
                    "type": "string",
                    "example": "01-06-2017"
                },
                "text": {
                    "description": "Text object containing",
                    "allOf": [
                        {
                            "$ref": "#/definitions/entity.Text"
                        }
                    ]
                },
                "updated_at": {
                    "type": "string",
                    "example": "01-06-2017"
                }
            }
        },
        "entity.Text": {
            "description": "Text object containing couplets",
            "type": "object",
            "properties": {
                "couplets": {
                    "description": "List of couplets in the song",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        }
    }
}